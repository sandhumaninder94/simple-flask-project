import jwt.algorithms
from flask.views import MethodView
from flask_smorest import Blueprint,abort
from sqlalchemy.exc import SQLAlchemyError
from passlib.hash import pbkdf2_sha256
from flask_jwt_extended import create_access_token, create_refresh_token, get_jwt, get_jwt_identity, jwt_required, \
    get_current_user

from db import db
from schemas import UserSchema
from models import UserModel
from blocklist import BLOCKLIST

blp = Blueprint("Users", "users", description="User related operations")

@blp.route("/register")
class UserRegister(MethodView):

    @blp.arguments(UserSchema)
    def post(self,user_data):

        # first we need to check if the user already exists, if it does, no need to register it again
        if UserModel.query.filter(UserModel.username == user_data["username"]).first():
            abort(409, message="A user with that username already exists")

        #Note that we are not receiving id from user because that will be generated by database (for me - get details from AI)
        user = UserModel(
            username = user_data["username"],
            password = pbkdf2_sha256.hash(user_data["password"])
        )

        db.session.add(user)
        db.session.commit()

        return {"message":"User created successfully"}, 201

@blp.route("/user/<int:user_id>")
class User(MethodView):

    """
        This resource can be useful when testing our Flask app.
        We may not want to expose it to public users, but for the
        sake of demonstration in this course, it can be useful
        when we are manipulating data regarding the users.
    """

    @blp.response(200, UserSchema)
    def get(self,user_id):
        user = UserModel.query.get_or_404(user_id)
        return user

    def delete(self,user_id):

        user = UserModel.query.get_or_404(user_id)

        db.session.delete(user)
        db.session.commit()

        return {"message": "User deleted successfully"}, 200

#Login
@blp.route("/login")
class UserLogin(MethodView):
    @blp.arguments(UserSchema)
    def post(self,user_data):

        #we will first check if the user exists in database
        user = UserModel.query.filter(UserModel.username == user_data["username"]).first()

        if user and pbkdf2_sha256.verify(user_data["password"], user.password):
            access_token = create_access_token(identity=str(user.id), fresh=True)
            refresh_token = create_refresh_token(identity=str(user.id))
            return {"message":"user logged in successfully","access_token":access_token, "refresh_token":refresh_token}, 200
        else:
            abort(400, message="Invalid username or password")

@blp.route("/logout")
class UserLogout(MethodView):
    #hun ethe ki karna ????
    @jwt_required()
    def post(self):
        jti = get_jwt()["jti"] #this is equal to two lines- jti=get_jwt() and then jti.get("jti")
        BLOCKLIST.add(jti)
        return {"message": "user logged out successfully"}, 200


@blp.route("/refresh")
class UserRefresh(MethodView):

    @jwt_required(refresh=True)
    def post(self):

        current_user = get_jwt_identity()
        new_token = create_access_token(identity=current_user, fresh=False)

        #if we want that refresh token should be used only once, then we need to store that refresh token in BLOCKLIST
        jti = get_jwt()["jti"]
        BLOCKLIST.add(jti)

        return {"access_token": new_token}, 200

